.EXPORT_ALL_VARIABLES:

############################################################################
#
#  A Generic mips config.arch that can be included by other platforms
#  to reduce the number of places that need to be edited when something
#  common changes. If you include this file you may provide:
#
#    CPUFLAGS          - cpu specific flags to pass to the compiler
#    VENDOR_CFLAGS     - vendor specific flags to pass to the compiler
#    LOPT              - library optimisation flags
#    UOPT              - user optimisation flags
#    GLIBC_TARGET_OPTS - flags needed for gcc
#
#  David McCullough <davidm@snapgear.com>
#
############################################################################

# Detect module dir
ifeq ($(ROOTDIR)/modules,$(wildcard $(ROOTDIR)/modules))
  EXTRA_MODULE_DIRS := $(ROOTDIR)/modules
endif

# Default version information
VERSIONPKG  ?= 4.4.198
VERSIONSTR  ?= $(CONFIG_VENDOR)/$(CONFIG_PRODUCT) Version $(VERSIONPKG)

# Default release files
RELFILES ?= \
  boot/boot.bin boot/boot.elf \
  images/image.bin images/flash.bin \
  $(LINUXDIR)/linux

############################################################################
# Target and toolchain
############################################################################

ENDIAN          := little
ARCH            := mips
MACHINE         := $(ARCH)
HOST_TARGET     ?= mipsel-linux
CROSS_COMPILE   ?= $(CONFIG_CROSS_COMPILE)-
CROSS           ?= $(CROSS_COMPILE)
CONFIGURE_HOST  ?= $(CONFIG_CROSS_COMPILE)-

# Toolchain commands
CC       := $(CROSS_COMPILE)gcc
CXX      := $(CROSS_COMPILE)g++
AS       := $(CROSS_COMPILE)as
AR       := $(CROSS_COMPILE)ar
LD       := $(CROSS_COMPILE)ld
NM       := $(CROSS_COMPILE)nm
OBJCOPY  := $(CROSS_COMPILE)objcopy
OBJDUMP  := $(CROSS_COMPILE)objdump
RANLIB   := $(CROSS_COMPILE)ranlib
STRIP    := $(CROSS_COMPILE)strip
READELF  := $(CROSS_COMPILE)readelf

############################################################################
# Extra tools and defaults
############################################################################

ELF2FLT    ?= elf2flt
GCC        ?= $(CC)
STRIPTOOL  ?= $(STRIP)

LIBC       ?=
LIBGCC     ?=
CRTN       ?=

#GCC_DIR        = $(shell $(CC) -v 2>&1|grep specs|sed -e 's/.* \(.*\)specs/\1\./')
#MACH_DIR       = $(shell $(CC) -print-multi-directory)

# have we set a special config below
UCLINUX_BUILD_SET = 0

# Include shared vendor config
include $(ROOTDIR)/vendors/config/common/config.arch

# Flags init
CFLAGS   ?=
CXXFLAGS ?=
LDFLAGS  ?=

############################################################################
# uClinux library build mode
############################################################################

ifdef UCLINUX_BUILD_LIB
  ifdef CONFIG_LIB_DEBUG
    CFLAGS := $(if $(LOPT),$(LOPT),-O1) -g
  else
    CFLAGS := $(if $(LOPT),$(LOPT),-O2) -fomit-frame-pointer
  endif
  CFLAGS  += -pipe $(VENDOR_CFLAGS) -DEMBED -Dlinux -D__linux__ -Dunix
  CFLAGS  += -I$(ROOTDIR)/stage/include
  LDFLAGS += -L$(ROOTDIR)/stage/lib

  ARCH_CFLAGS := $(CFLAGS)
  UCLINUX_BUILD_SET := 1
endif

############################################################################
# uClinux user application build mode
############################################################################

ifdef UCLINUX_BUILD_USER
  ifdef CONFIG_USER_DEBUG
    CFLAGS := $(if $(UOPT),$(UOPT),-O1) -g
  else
    CFLAGS := $(if $(UOPT),$(UOPT),-Os) -fomit-frame-pointer
  endif
  CFLAGS  += -pipe $(VENDOR_CFLAGS)
  CFLAGS  += -Dlinux -D__linux__ -Dunix -DEMBED
  CFLAGS  += -I$(ROOTDIR)/stage/include
  LDFLAGS += -L$(ROOTDIR)/stage/lib

# LDLIBS   = $(LIBC) $(LIBGCC) $(CRTN)
  FLTFLAGS :=
  export FLTFLAGS

  # for anyone still using it
  CONVERT := /bin/true

  UCLINUX_BUILD_SET := 1
endif

############################################################################
# Shared additional flags
############################################################################

ifeq ($(UCLINUX_BUILD_SET),1)
  CFLAGS += $(CPUFLAGS)
endif

############################################################################
# Common warnings
############################################################################

CFLAGS += \
  -Wall \
  -Wno-trigraphs \
  -Wno-strict-aliasing \
  -Wno-format-security \
  -Wno-pointer-sign \
  -Wno-unused

############################################################################
# GCC-specific optimizations
############################################################################

ifneq ($(origin check-gcc-flag), undefined)
  CFLAGS += $(call check-gcc-flag,-fno-tree-slsr,)
  CFLAGS += $(call check-gcc-flag,-fno-aggressive-loop-optimizations,)
endif

############################################################################
# C++ specific flags
############################################################################

CXXFLAGS += $(CFLAGS) $(INCCXX)
CXXLIBS  := -Wl,-Bdynamic $(LIBC) $(LIBGCC) $(CRTN)

############################################################################
# Optional debug print
############################################################################

DEBUG_PRINT ?= 0
ifeq ($(DEBUG_PRINT),1)
  $(info [DEBUG] CC        = $(CC))
  $(info [DEBUG] CFLAGS    = $(CFLAGS))
  $(info [DEBUG] CXXFLAGS  = $(CXXFLAGS))
  $(info [DEBUG] LDFLAGS   = $(LDFLAGS))
  $(info [DEBUG] TOOLCHAIN = $(CONFIG_TOOLCHAIN))
endif
